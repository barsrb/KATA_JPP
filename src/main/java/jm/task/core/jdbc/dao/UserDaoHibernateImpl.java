package jm.task.core.jdbc.dao;

import jm.task.core.jdbc.model.User;
import jm.task.core.jdbc.util.Util;
import org.hibernate.HibernateException;
import org.hibernate.SQLQuery;
import org.hibernate.Session;
import org.hibernate.Transaction;
import org.hibernate.query.Query;

import java.util.List;

public class UserDaoHibernateImpl implements UserDao {
    public UserDaoHibernateImpl() {

    }


    @Override
    public void createUsersTable() {
        Transaction tx = null;
        try (Session session = Util.getSessionFactory().getCurrentSession()) {
            tx = session.beginTransaction();
            SQLQuery query = session.createNativeQuery("CREATE TABLE IF NOT EXISTS users"
                    + "  (id              BIGINT generated by default as identity,"
                    + "   name            VARCHAR(256),"
                    + "   lastName        VARCHAR(256),"
                    + "   age             SMALLINT)");
            query.executeUpdate();
            tx.commit();
        } catch (Exception ex) {
            System.err.format("SQL State: %s", ex.getMessage());
            if (tx != null) {
                tx.rollback();
            }
        }
    }

    @Override
    public void dropUsersTable() {
        Transaction tx = null;
        try (Session session = Util.getSessionFactory().getCurrentSession()) {
            tx = session.beginTransaction();
            SQLQuery query = session.createNativeQuery("DROP TABLE IF EXISTS Users");
            query.executeUpdate();
            tx.commit();
        } catch (Exception ex) {
            System.err.format("SQL State: %s", ex.getMessage());
            if (tx != null) {
                tx.rollback();
            }
        }
    }

    @Override
    public void saveUser(String name, String lastName, byte age) {
        Transaction tx = null;
        try (Session session = Util.getSessionFactory().getCurrentSession()) {
            tx = session.beginTransaction();
            User user = new User(name, lastName, age);
            session.save(user);
            tx.commit();
        } catch (Exception ex) {
            System.err.format("SQL State: %s", ex.getMessage());
            if (tx != null) {
                tx.rollback();
            }
        }

    }

    @Override
    public void removeUserById(long id) {
        Transaction tx = null;
        try (Session session = Util.getSessionFactory().getCurrentSession()) {
            tx = session.beginTransaction();
            String hql = "delete from Users where id= :id";
            Query query = session.createNativeQuery(hql);
            query.setParameter("id", id);
            query.executeUpdate();
            tx.commit();
        } catch (Exception ex) {
            System.err.format("SQL State: %s", ex.getMessage());
            if (tx != null) {
                tx.rollback();
            }
        }

    }

    @Override
    public List<User> getAllUsers() {
        try (Session session = Util.getSessionFactory().openSession()) {
            return session.createQuery("from User", User.class).list();
        }
    }

    @Override
    public void cleanUsersTable() {
        Transaction tx = null;
        try (Session session = Util.getSessionFactory().getCurrentSession()) {
            tx = session.beginTransaction();
            SQLQuery query = session.createNativeQuery("TRUNCATE Users RESTART IDENTITY");
            query.executeUpdate();
            tx.commit();
        } catch (Exception ex) {
            System.err.format("SQL State: %s", ex.getMessage());
            if (tx != null) {
                tx.rollback();
            }
        }
    }
}
